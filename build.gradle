plugins {
	id "com.jfrog.bintray" version "1.8.0"
}


////////////////////////////////////////////////////////////////// SCRIPT DEPENDENCY FOR ANTLR4 PLUGIN


repositories {
   jcenter()
   mavenCentral()
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'antlr'
apply plugin: 'signing'
apply plugin: 'maven-publish'

///////////////////////////////////////////////////////////////// CONFIGURATION

group = 'fr.univ-nantes.julestar'
archivesBaseName = 'uima-tokens-regex'
version = '2.1.2'

////////////////////////////////////////////////////////////////// DEPENDENCIES

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

if(hasProperty("signing.keyId")) {
	// activate signing of artifacts, only if signing is configured properly
	signing {
		sign configurations.archives
	}
}

dependencies {

	antlr "org.antlr:antlr4:4.7"

	// Logging
	compile "org.slf4j:slf4j-api:1.7.25"

	// Tests
	testCompile "com.fasterxml.jackson.core:jackson-databind:2.5.2"
	testCompile "junit:junit:4.12"
	testCompile "eu.codearte.catch-exception:catch-exception:1.4.1"
	testCompile "org.assertj:assertj-core:2.0.0"
	testCompile "org.mockito:mockito-all:1.10.19"
	testCompile "org.apache.uima:uimaj-tools:2.8.1"
	testCompile "fr.univ-nantes.julestar:uima-test:1.0.0"
	testCompile 'ch.qos.logback:logback-classic:1.2.3'

	// UIMA
	compile 'org.apache.uima:uimaj-core:2.10.0'
	compile "org.apache.uima:uimafit-core:2.3.0"
	compile 'com.google.guava:guava:21.0'

	// Resource formats
	compile 'com.fasterxml.jackson.core:jackson-core:2.9.2'
	compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.2'
	compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.9.2'

	// Antlr
	runtime "org.antlr:antlr4-runtime:4.7"
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}


publishing {
	publications {
		maven(MavenPublication) {
			groupId group
			artifactId archivesBaseName
			version version

			from components.java

			artifact sourceJar {
                classifier "sources"
            }
		}
	}
}


////////////////////////////////////////////////////////////////// ANTLR4

generateGrammarSource {    
    /*
     * Puts generated sources under src/main/java in order to
     * ease the integration with any IDE.
     */
    outputDirectory = new File("src/main/java/fr/univnantes/lina/uima/tkregex/antlr/generated")
}


task jcasgenTest(type: JavaExec) {
	description = 'Generate UIMA TS classes'
	ext.srcFile = file("$projectDir/src/test/resources/TestTypeSystem.xml")
	ext.outputDir = file("$projectDir/src/test/java")
	inputs.file srcFile
	outputs.dir outputDir
	println "src: $srcFile"
	println "output: $outputDir"

	classpath configurations.testCompile
	// This ensures availability of type system imports
	// however, assumes that files are in desc subfolder
	systemProperty 'uima.datapath', "$projectDir/desc"
	main = 'org.apache.uima.tools.jcasgen.Jg'
	args = ['-jcasgeninput', srcFile, '-jcasgenoutput', outputDir]
}
compileTestJava.dependsOn jcasgenTest

bintray {
	user = System.getenv('BINTRAY_USER')
	key = System.getenv('BINTRAY_KEY')
	publications = ['maven']
	publish = true
	override = true
	pkg {
		repo = 'maven'
		name = 'fr.univ-nantes.julestar:uima-tokens-regex'
		userOrg = 'pompadour'
		licenses = ['Apache-2.0']
		vcsUrl = 'https://github.com/nantesnlp/uima-tokens-regex.git'
		version {
			name = project.property("version")
			desc = "UIMA Tokens Regex " + project.property("version")
			released  = new Date()
		}
	}
}
