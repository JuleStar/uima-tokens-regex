////////////////////////////////////////////////////////////////// SCRIPT DEPENDENCY FOR ANTLR4 PLUGIN


repositories {
   jcenter()
   mavenCentral()
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'antlr'
apply plugin: 'signing'
apply plugin: 'maven-publish'

///////////////////////////////////////////////////////////////// CONFIGURATION

group = 'fr.univ-nantes.julestar'
archivesBaseName = 'uima-tokens-regex'
version = '1.4'

////////////////////////////////////////////////////////////////// DEPENDENCIES

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task jarWithSources(type: Jar) {
	from sourceSets.main.output
	if (gradle.startParameter.taskNames.any{it == "publishToMavenLocal"}) {
		from sourceSets.main.allJava
	}
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

if(hasProperty("signing.keyId")) {
	// activate signing of artifacts, only if signing is configured properly
	signing {
		sign configurations.archives
	}
}

dependencies {

	antlr "org.antlr:antlr4:4.7"
    
	// Logging
	compile "org.slf4j:slf4j-api:1.7.25"

	// Tests
	testCompile "com.fasterxml.jackson.core:jackson-databind:2.5.2"
	testCompile "junit:junit:4.12"
	testCompile "eu.codearte.catch-exception:catch-exception:1.4.1"
	testCompile "org.assertj:assertj-core:2.0.0"
	testCompile "org.mockito:mockito-all:1.10.19"

	// UIMA
	compile 'org.apache.uima:uimaj-core:2.10.0'
	compile "org.apache.uima:uimafit-core:2.3.0"

	compile 'com.google.guava:guava:21.0'

	// Antlr
	runtime "org.antlr:antlr4-runtime:4.7"
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId group
			artifactId archivesBaseName
			artifact jarWithSources
			version version

			//from components.java
		}
	}
}

if(hasProperty("ossrhUsername")) {
	uploadArchives {
		repositories {
		  mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
	
			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
			  authentication(userName: ossrhUsername, password: ossrhPassword)
			}
	
			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
			  authentication(userName: ossrhUsername, password: ossrhPassword)
			}
	
			pom.project {
			  name 'UIMA Tokens Regex'
			  packaging 'jar'
			  // optionally artifactId can be defined here
			  description 'A UIMA Analysis Engine that detects in a CAS occurrences of a regular expressions over UIMA annotations'
			  url 'https://github.com/JuleStar/uima-tokens-regex'
	
			  scm {
				  connection 'scm:git:git@github.com:julestar/uima-tokens-regex.git'
				  developerConnection 'scm:git:git@github.com:julestar/uima-tokens-regex.git'
				  url 'git@github.com:julestar/uima-tokens-regex.git'
			  }
	
			  licenses {
				  license {
					  name 'The Apache License, Version 2.0'
					  url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
				  }
			  }
	
			  developers {
				  developer {
					  id developerId
					  name developerName
					  email developerEmail
				  }
			  }
			}
		  }
		}
	}
} else {
def msg = "Publishing to maven central (task uploadArchives) is not possible since no gradle property file is found (use \"\$ cp gradle.properties.sample gradle.properties\")"
logger.warn(msg)
}
////////////////////////////////////////////////////////////////// ANTLR4

generateGrammarSource {
    maxHeapSize = "64m"
    
    /*
     * Puts generated sources under src/main/java in order to
     * ease the integration with any IDE.
     */
    outputDirectory = new File("src/main/java/fr/univnantes/lina/uima/tkregex/antlr/generated")
}
